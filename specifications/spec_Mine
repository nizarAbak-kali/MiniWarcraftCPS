service : Mine
refine : Terrain
enum Side {PLAYER, ENEMY, NONE}

observators :
	estAbandonnee   : [Mine] -> boolean
	abandonCompteur : [Mine] -> int
	side            : [Mine] -> Side
		pre side(M) require ¬estAbandonnee(M)
Constructors :
	init : int × int × int -> [Mine]
		pre init(largeur,hauteur,orRestant) require largeur%2=1 ∧ hauteur%2=1 ∧ orRestant>0

Operators :
	acceuil : [Mine] × Side -> [Mine]
		pre acceuil(M,side)  require ¬abandoned(M) ∧ side != NONE
	abandoned : [Mine] -> [Mine]
		pre abandoned(M) require ¬estAbandonnee(M)

Observations :
[Invariants]
	estAbandonnee(M) =(min) abandonCompteur = 51
	0 ≤abandonCompteur(M) ≤ 51
	side(M,S) = NONE ⇔ estAbandonnee(M)
[init]
	Terrain::largeur(init(l,h,o)) = l
	Terrain::hauteur(init(l,h,o)) = h
	Terrain::type(init(l,h,o)) = MINE
	Terrain::orRestant(init(l,h,o)) = 51
	abandonCompteur(init(l,h,o)) = 51
	side(init(l,h,o)) = NONE
[acceuil]
	Terrain::orRestant(acceuil(M)) = orRestant(M)
	abandonCompteur(accueil(M)) = 0
	side(acceuil(M, s)) = s
[abandoned]
	Terrain::orRestant(abandoned(M)) = orRestant(M)
	abandonCompteur(abandoned(M)) = abandonCompteur()+1
	side(abandoned(M)) = side(M)
[retrait]
	abandonCompteur(retrait(S,somme)) = abandonCompteur(S)
	side(Terrain::retrait(M, s)) = side(M)

